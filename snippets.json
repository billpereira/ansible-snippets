{
    "New Playbook": {
        "prefix": "newplay",
        "body": [
            "---",
            "- hosts: $1",
            "",
            "  gather_facts: ${1|yes,no|}",
            "  vars: $3",
            "  environment: ${4:\"{{ environment_vars \\}\\}\"}",
            "",
            "  tasks:",
            "    $0"
        ],
        "description": "New playbook structure"
    },
    "Standard Variables":{
        "prefix": ["env","var"],
        "body": [
            "---",
			"# System Related Variables",
            "PYZ: \"/usr/local/python/Python-3.8\"",
            "ZOAU: \"/usr/local/zoau\"",
            "ansible_python_interpreter: /usr/local/python/Python-3.8/bin/python3",
            "environment_vars:",
            "  _BPXK_AUTOCVT: \"ON\"",
            "  ZOAU_HOME: \"{{ ZOAU }}\"",
            "  PYTHONPATH: \"{{ ZOAU }}/lib\"",
            "  LIBPATH: \"{{ ZOAU }}/lib:{{ PYZ }}/lib:/lib:/usr/lib:.\"",
            "  PATH: \"{{ ZOAU }}/bin:{{ PYZ }}/bin:/bin:/var/bin\"",
            "  _CEE_RUNOPTS: \"FILETAG(AUTOCVT,AUTOTAG) POSIX(ON)\"",
            "  _TAG_REDIR_ERR: \"txt\"",
            "  _TAG_REDIR_IN: \"txt\"",
            "  _TAG_REDIR_OUT: \"txt\"",
            "  _CC_LIB_PREFIX: \"SYS1\"",
            "  LANG: \"C\"",
			"  $0"
        ],
        "description": "Standard variables of a new playbook for zOS"
    },
	"zos_data_set_sequential": {
		"prefix": "ZOS_DATA_SET_SEQ",
		"body": [
			"- name: $1",
			"  ibm.ibm_zos_core.zos_data_set: ",
			"    name: $2",
			"    type: seq",
			"    state: present",
			"",
			"$0"
		],
		"description": "Create a sequential data set if it does not exist"
	},
    "zos_dataset_basic":{
        "body": [
            "- name: \"${1:Task name}\"",
            "  ibm.ibm_zos_core.zos_data_set: ",
            "    name: ${2:DATASET.NAME}",
            "    type: ${3|KSDS,ESDS,RRDS,LDS,SEQ,PDS,PDSE,LIBRARY,BASIC,LARGE,MEMBER,HFS,ZFS|}",
            "    state: ${4|present,absent,cataloged,uncataloged|}",
            "$0"
        ],
        "description": "zOS Dataset module basic usage ",
        "prefix": "zos_dataset_basic"
    },
	"zos_data_set": {
		"prefix": "zos_dataset",
		"body": [
			"- name: ${1:Working with datasets}",
			"  ibm.ibm_zos_core.zos_data_set:",
			"    name: ${2:Dataset name}",
			"    type: ${3|KSDS,ESDS,RRDS,LDS,SEQ,PDS,PDSE,LIBRARY,BASIC,LARGE,MEMBER,HFS,ZFS|}",
			"    record_format: ${4|FB,VB,FBA,VBA|}",
			"    record_length: ${5:80}",
			"    space_primary: ${6:1}",
			"    space_secondary: ${7:1}",
			"    space_type: ${8|TRK,CYL,K,M,G|}",
			"    replace: ${9|False,True|}",
			"    state: ${10|present,absent,cataloged,uncataloged|}",
			"    # sms_data_class:",
			"    # sms_management_class:",
			"    # sms_storage_class:",
			"    # sms_storage_class:",
			"    # volumes:",
			"",
			"$0"
		],
		"description": "Core dataset snippet"
	},
	"zos_encode": {
		"prefix": "zos_encode",
		"body": [
			"- name: ${1:Task name}",
			"  ibm.ibm_zos_core.zos_encode:",
			"    src: ${2:Source file}",
			"    dest: ${3:Dest file}",
			"    from_encoding: ${4|ISO8859-1,IBM-1047|}",
			"    to_encoding: ${5|IBM-1047,ISO8859-1|}",
			"    # backup: yes",
			"    # backup_compress: yes",
			"    # backup_name: name",
			"$0"
		],
		"description": "Converts the encoding of characters that are read from a UNIX System Services (USS) file or path"
	},
	"zos_job_submit": {
		"prefix": "ZOS_JOB_SUBMIT",
		"body": [
			"- name: ${1:Task name}",
			"  ibm.ibm_zos_core.zos_job_submit:",
			"    src: ${2:JCL Path/DSN}",
			"    location: ${3|LOCAL,USS,DATA_SET|}",
			"    wait: ${4|true,false|}",
			"    return_output: ${5|true,false|}",
			"    max_rc: ${6:0} #Only checked when wait=true",
			"    # wait_time_s: 60",
			"    # volume: VOLSER",
			"    # encoding:",
			"    #   from: ISO8859-1",
			"    #   to: IBM-037",
			"$0"
		],
		"description": "Submit JCL from DATA_SET , USS, or LOCAL location."
	},
    "zos_copy_simple":{
        "body": [
            "- name: \"${1:Task name}\"",
            "  ibm.ibm_zos_core.zos_copy: ",
            "    ${2|src,content|}: \"${3:full path, variable or dataset}\"",
            "    dest: ${4:DATASET/PATH}",
            "$0"
        ],
        "description": "zOS Copy module to dataset or file ",
        "prefix": "zos_copy_simple"
    },
    "zos_copy_remote":{
        "body": [
            "- name: \"${1:Task name}\"",
            "  ibm.ibm_zos_core.zos_copy: ",
            "    src: \"${2:full path}\"",
            "    dest: ${3:DATASET/PATH}",
            "    remote_src: ${4:true}",
            "$0"
        ],
        "description": "zOS Copy module with remote src to dataset or file ",
        "prefix": "zos_copy_remote"
    },
    "zos_copy_binary":{
        "body": [
            "- name: \"${1:Task name}\"",
            "  ibm.ibm_zos_core.zos_copy: ",
            "    src: \"${2:full path}\"",
            "    dest: ${3:DATASET/PATH}",
            "    is_binary: ${4:true}",
            "$0"
        ],
        "description": "zOS Copy binary file to dataset or file ",
        "prefix": "zos_copy_binary"
    },
    "zos_copy_follow_link":{
        "body": [
            "- name: \"${1:Task name}\"",
            "  ibm.ibm_zos_core.zos_copy: ",
            "    src: \"${2:path/to/link}\"",
            "    dest: ${3:DATASET/PATH}",
            "    local_follow: true",
            "$0"
        ],
        "description": "zOS Copy module to dataset or file using link as src",
        "prefix": "zos_copy_follow_link"
    },
    "zos_copy_encoding":{
        "body": [
            "- name: \"${1:Task name}\"",
            "  ibm.ibm_zos_core.zos_copy: ",
            "    src: \"${2:path/to/link}\"",
            "    dest: ${3:DATASET/PATH}",
            "    encoding:",
            "      from: ${4:UTF-8}",
            "      to: ${5:IBM-037}",
            "$0"
        ],
        "description": "zOS Copy module to dataset or file doing encoding",
        "prefix": "zos_copy_encoding"
    },
    "zos_copy_file_with_permissions":{
        "body": [
            "- name: \"${1:Task name}\"",
            "  ibm.ibm_zos_core.zos_copy: ",
            "    ${2|src,content|}: \"${3:full path, variable or dataset}\"",
            "    dest: ${4:DATASET/PATH}",
            "    mode: ${5:0750}",
            "    group: ${6:GROUP}",
            "    owner: ${7:OWNER}",
            "$0"
        ],
        "description": "zOS Copy module to file setting permissions and owner",
        "prefix": "zos_copy_file_with_permissions"
    },
    "zos_copy_file_customized_dest":{
        "body": [
            "- name: \"${1:Task name}\"",
            "  ibm.ibm_zos_core.zos_copy: ",
            "    ${2|src,content|}: \"${3:full path, variable or dataset}\"",
            "    dest: ${4:DATASET}",
            "    dest_data_set:",
            "      type: ${5:SEQ}",
            "      space_primary: ${6:1}",
            "      space_secondary: ${7:1}",
            "      space_type: ${8:K}",
            "      record_format: ${9:FB}",
            "      record_length: ${10:80}",
            "$0"
        ],
        "description": "zOS Copy module to dataset changing allocation parms",
        "prefix": "zos_copy_file_customized_dest"
    },
	"zos_copy_comments": {
		"prefix": "zos_copy_comments",
		"body": [
			"- name: ${1:Task name}",
			"  ibm.ibm_zos_core.zos_copy:",
			"    ${2|src,content|}: \"${3:full path, variable or dataset}\"",
			"    dest: ${4:Destination}",
			"    # backup: ",
			"    # backup_name: ",
			"    # content: ",
			"    # encoding: ",
			"    # force: ",
			"    # ignore_sftp_stderr: ",
			"    # is_binary: ",
			"    # local_follow: ",
			"    # mode: ",
			"    # model_ds: ",
			"    # remote_src: ",
			"    # sftp_port: ",
			"    # validate: ",
			"$0"
		],
		"description": "Copy data to z/OS with commented attributes"
	},
    "zos_lineinfile":{
        "body": [
            "- name: \"${1:Task name}\"",
            "  ibm.ibm_zos_core.zos_lineinfile: ",
            "    src: ${2:DATASET.NAME.OR.PATH}",
            "    regexp: ${3:'^yourregex'}",
            "    insertafter: ${4:'^yourregex'}",
            "    line: ${5:line to be added}",
            "$0"
        ],
        "description": "zOS Line in file, to manage content of files/datasets ",
        "prefix": "zos_lineinfile"
    },
    "zos_operator":{
        "body": [
            "- name: \"${1:Task name}\"",
            "  ibm.ibm_zos_core.zos_operator: ",
            "    cmd: ${2:mvs command}",
            "$0"
        ],
        "description": "zOS Operator module to send mvs commands",
        "prefix": "zos_operator"
    },
	
	"template": {
		"prefix": "TEMPLATE",
		"body": [
			"- name: ${1:Task name}",
			"  ansible.builtin.template:",
			"    src: ${2:Template source}",
			"    dest: ${3:Src}",
			"    # owner: bin",
			"    # group: wheel",
			"    # mode: '0644'",
			"$0"
		],
		"description": "Template module"
	},
	"debug": {
		"prefix": "DEBUG",
		"body": [
			"- ansible.builtin.debug:",
			"    msg: $1",
			"$0"
		],
		"description": "Print message"
	},
	"zos_mvs_raw": {
		"prefix": "ZOS_MVS_RAW",
		"body": [
			"- name: $1",
			"  ibm.ibm_zos_core.zos_mvs_raw:",
			"    program_name: ${2:idcams}",
			"    # parm:",
			"    # auth:",
			"    dds:",
			"      $0"
		],
		"description": "Run a z/OS program"
	},
	"zos_mvs_raw_dd_concat": {
		"prefix": "DD_CONCAT",
		"body": [
			"- dd_concat:",
			"    dd_name: ${1:concat}",
			"    dds:",
			"      $0"
		],
		"description": "dd_concat is used to specify a data set concatenation"
	},
	"zos_mvs_raw_dd_data_set": {
		"prefix": "DD_DATA_SET",
		"body": [
			"- dd_data_set:",
			"    dd_name: ${1:DD Name}",
			"    data_set_name: ${2:DATA.SET.NAME}",
			"  $0"
		],
		"description": "dd_data_set is used to specify a data set"
	},
	"zos_mvs_raw_dd_dummy": {
		"prefix": "DD_DUMMY",
		"body": [
			"- dd_dummy:",
			"    dd_name: ${1:DD Name}",
			"  $0"
		],
		"description": "dd_dummy accepts no content input."
	},
	"zos_mvs_raw_dd_input": {
		"prefix": "DD_INPUT",
		"body": [
			"- dd_input:",
			"    dd_name: ${1:DD Name}",
			"    content:",
			"      - ${2:Can be single line or list of lines}",
			"  $0",
		],
		"description": "dd_input is used to specify an in-stream data set."
	},
	"zos_mvs_raw_dd_output": {
		"prefix": "DD_OUTPUT",
		"body": [
			"- dd_output:",
			"    dd_name: ${1:DD Name}",
			"    return_content:",
			"      type: ${2|text,base64|}",
			"  $0",
		],
		"description": "Use dd_output to specify - Content sent to the DD should be returned to the user."
	},
	"zos_mvs_raw_dd_unix": {
		"prefix": "DD_UNIX",
		"body": [
			"- dd_unix:",
			"    dd_name: ${1:DD Name}",
			"    path: ${2:/path/to/file}",
			"  $0"
		],
		"description": "The path to a file in UNIX System Services (USS)."
	},
	"zos_mvs_raw_dd_vio": {
		"prefix": "DD_VIO",
		"body": [
			"- dd_vio:",
			"    dd_name: ${1:DD Name}",
			"  $0"
		],
		"description": "dd_vio is used to handle temporary data sets."
	},
	"zos_fetch": {
		"prefix": "ZOS_FETCH",
		"body": [
			"- name: $1",
			"  ibm.ibm_zos_core.zos_fetch:",
			"    dest: ${2:Local path where the file or data set will be stored}",
			"    src: ${3:Name of a UNIX System Services (USS) file, PS(sequential data set), PDS, PDSE, member to be fetched}",
			"$0"
		],
		"description": "Fetch data from z/OS"
	},
	"zos_job_output": {
		"prefix": "ZOS_JOB_OUTPUT",
		"body": [
			"- name: ${1:JES Job output with all ddnames}",
			"  ibm.ibm_zos_core.zos_job_output:",
			"    job_id: ${2:\"STC*\"}",
			"    job_name: ${3:\"*\"}",
			"    owner: ${4:\"IBMUSER\"}",
			"    ddname: ${5:\"?\"}",
			"$0"
		],
		"description": "Display job output"
	},
	"zos_ping": {
		"prefix": "ZOS_PING",
		"body": [
			"- name: ${1:Ping the z/OS host and perform resource checks}",
			"  ibm.ibm_zos_core.zos_ping:",
			"  register: ${2:result}",
			"$0"
		],
		"description": "Ping z/OS and check dependencies"
	},
	"zos_tso_command": {
		"prefix": "ZOS_TSO_COMMAND",
		"body": [
			"- name: ${1:Issue TSO commands}",
			"  ibm.ibm_zos_core.zos_tso_command:",
			"    commands:",
			"      - $2",
			"$0"
		],
		"description": "Execute TSO commands"
	},
    "Setting Fact":{
        "prefix": "set_fact",
        "body": [
            "- name: ${1:Task name}",
            "  ansible.builtin.set_fact:",
            "    ${2:variable}: $0"
        ],
        "description": "set_fact module"
    },
    "Lookup CSV":{
        "body": "\"{{ lookup('csvfile','new file=${1:/path/tofile} delimiter=${2:;} col=${3:1}') }}\"$0",
        "description": "Lookup module for CSV files",
        "prefix": "lookup_csv"
    },
    "Lookup INI":{
        "body": "\"{{ lookup('ini','${1:KEY} section=${2:SECTION} file=${3:/path/tofile}') }}\"$0",
        "description": "Lookup module for INI files",
        "prefix": "lookup_ini"
    },
    "Delegate to":{
        "body": "delegate_to: ${1:localhost} $0",
        "description": "delegate to property to specify host responsible for task",
        "prefix": "delegate"
    },
    "register":{
        "body": "register: ${1:fact_name} $0",
        "description": "Register task output to fact",
        "prefix": "register"
    },
    "Run once":{
        "body": "run_once: ${1|true,false|}",
        "description": "Specify if task has to be executed only once",
        "prefix": "run_once"
    },
    "Include Role":{
        "body": [
            "- name: \"${1:Task description}\"",
            "  include_role:",
            "    name: ${2:role_name}",
        ],
        "description": "Include role statement",
        "prefix": "inc_role"
    },
    "Include Tasks":{
        "body": [
            "- name: $1",
            "  include_tasks: $0",
            ""
        ],
        "description": "Include tasks statement",
        "prefix": "inc_task"
    },
    "Lineinfile":{
        "body": [
            "- name: $1",
            "  ansible.builtin.lineinfile:",
            "    path: $2",
            "    line: ${3:\"{{item\\}\\}\"}",
            "    create: ${4|yes,no|}",
            "  with_items:",
            "    - \"$5\"",
            "$0"
        ],
        "description": "lineinfile with items module",
        "prefix": "lineinfile_items"
    },
    "URI":{
        "body": [
            "- name: \"${1:Task name}\"",
            "  ansible.builtin.uri: ",
            "    url: \"${2:url}\"",
            "    method: ${3|GET,POST,PUT,HEAD,DELETE,OPTIONS,PATCH,TRACE,CONNECT,REFRESH|}",
            "    validate_certs: ${4|yes,no|}",
            "    body_format: ${5|form-urlencoded,form-multipart,json,raw|}",
            "    body:",
            "      ${6:# Body fields}",
            "    headers:",
            "      ${7:# Header fields}",
            "    dest: ${8:/path/for/download}",
            "$0"
        ],
        "description": "",
        "prefix": "uri"
    }
}
